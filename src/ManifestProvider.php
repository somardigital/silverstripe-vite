<?php

namespace Somar\Vite;

use SilverStripe\Control\Director;
use SilverStripe\Core\Config\Configurable;
use SilverStripe\Core\Injector\Injectable;
use SilverStripe\Core\Injector\Injector;
use SilverStripe\Core\Manifest\ResourceURLGenerator;
use SilverStripe\Core\Path;

/**
 * Helper class for loading assets generated by Vite into
 * a manifest file.
 */
class ManifestProvider
{
    use Configurable;
    use Injectable;

    /**
     * Path to the vite build directory
     */
    private static string $build_path = '';

    /**
     * Path to the manifest file relative to the resource path
     */
    private static string $manifest_path = '.vite/manifest.json';

    /**
     * Cache for manifest file
     */
    private ?array $manifest = null;

    /**
     * Fetch the manifest file generated by Vite
     */
    public function getManifest(): array
    {
        if ($this->manifest !== null) {
            return $this->manifest;
        }

        $buildPath = $this->config()->get('build_path');
        if (!$buildPath) {
            throw new \InvalidArgumentException('Build path is not set');
        }

        $manifest = Path::join($buildPath, $this->config()->get('manifest_path'));
        $absPath = Director::getAbsFile($manifest);

        if (@file_exists($absPath)) {
            $contents = json_decode(file_get_contents($absPath), true);

            $this->manifest = $contents;
        } else {
            throw new \InvalidArgumentException('Manifest file not found');
        }

        return $this->manifest;
    }

    /**
     * Return resource array for the given path
     */
    public function resolveResource(string $resource): ?array
    {
        $manifest = $this->getManifest();

        if (!$manifest || !isset($manifest[$resource])) {
            return null;
        }

        $resourceData = $manifest[$resource];

        // Standardise format
        if (is_string($resourceData)) {
            $resourceData = [
                'file' => $resourceData,
            ];
        }

        return $resourceData;
    }

    /**
     * Resolves resource to dist path
     */
    public function resolvePath(string|array $resource): ?string
    {
        // Skip blank resources
        if (empty($resource)) {
            return null;
        }

        // If an array, assume it is already resolved
        $resourceData = is_array($resource) ? $resource : $this->resolveResource($resource);

        if (empty($resourceData)) {
            return null;
        }

        // Extract resource path and add prefix
        if (isset($resourceData['file'])) {
            $buildPath = $this->config()->get('build_path');
            $resource = Path::join($buildPath, $resourceData['file']);
        }

        return $resource;
    }

    /**
     * Resolves resource to the given url
     */
    public function resolveURL(string $resource): ?string
    {
        // Skip blank resources
        if (empty($resource)) {
            return null;
        }

        // Resolve resource path
        $resource = $this->resolvePath($resource);

        // Resolve resource to url
        /** @var ResourceURLGenerator $generator */
        $generator = Injector::inst()->get(ResourceURLGenerator::class);
        return $generator->urlForResource($resource);
    }

    /**
     * Template wrapper for resolvePath
     */
    public static function resourcePath(string $resource): ?string
    {
        return static::singleton()->resolvePath($resource);
    }

    /**
     * Template wrapper for resolveURL
     */
    public static function resourceURL(string $resource): ?string
    {
        return static::singleton()->resolveURL($resource);
    }
}
